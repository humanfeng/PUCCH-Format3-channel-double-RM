function Rxinput_b=PUCCHformat2(z,N_cell_ID,n_RNTI,subframe_N)
%生成PUCCH格式2，2a,2b,符号Z
global SYMBOL_L_SEQ_EX;
global CPflag;
global Delta_PUCCH_shift;
global n_1_PUCCH;
global PUCCHN_1_cs;
global N_RB_sc;
N_RB_sc = 12;
N_PUCCH_seq = 12;
%z_len=length(z);
i=0;
j=0;
k=0;
Rxinput_d = zeros(1,10);
for j=1:2
    n_s = subframe_N*2 + j-1;
    {PUCCHN_1;PUCCHn_oc;PUCCHn_1}=PUCCHParaCalculate(n_s,PUCCHN_1_cs,CPflag,Delta_PUCCH_shift,n_1_PUCCH,N_RB_sc);
    PUCCHAlpha2=PUCCHGenAlpha2(PUCCHn_1,n_2_PUCCH,n_s,N_RB_sc,N_2_RB,PUCCHN_1_cs,TxPUCCHn_cell_cs,l);
    for k=1:5
        l=SYMBOL_L_SEQ_EX(CPflag+1,k);
        
        %alpha = 2 * pi * 2/12;
        u = 11;
        M_RS_sc = N_RB_sc;
        r_alpha_u_v = rsgenforPUCCH(PUCCHAlpha2,u,M_RS_sc) ;  %生成r_alpha_u_v序列
        r_alpha_u_v_conj = conj(r_alpha_u_v);             %求共轭
        %解Z序列，由Z序列得出d(n)
        n=5*(j-1)+k;
        for i = 1 : N_RB_sc         %corrcoef
            z_index = N_PUCCH_seq * ( n - 1) + (i - 1);  %序号 
            temp = z(z_index + 1) * r_alpha_u_v_conj(i); %/abs(r_alpha_u_v(i))即模为1
            Rxinput_d(n) = Rxinput_d(n) + temp;
        end
        Rxinput_d(n) = Rxinput_d(n)/N_RB_sc; 
    end
    %解调制
    num_antenna = 1;
    Rxinput_b1 = qpsk_demod(num_antenna,Rxinput_d((j-1)*5+1:j*5));  

    Rxinput_b1_len = length(Rxinput_b1);            %求长度
    c = pseudo(Rxinput_b1_len,n_RNTI,N_cell_ID,n_s); % Pseudo-random sequences c(i) generation

    for i=1:Rxinput_b1_len
        if c(i) == 1
            Rxinput_b((j-1)*Rxinput_b1_len+i)= -Rxinput_b1(i); % scrambling b(i),resulting in a block of scrambled bits b1(0),...b1(numbits-1)
        else
            Rxinput_b((j-1)*Rxinput_b1_len+i) = Rxinput_b1(i);
        end
    end
end

